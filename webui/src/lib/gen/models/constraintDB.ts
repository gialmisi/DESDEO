/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * DESDEO (fast)API
 * A rest API for the DESDEO framework.
 * OpenAPI spec version: 0.1.0
 */
import type { ConstraintDBScenarioKeys } from './constraintDBScenarioKeys';
import type { ConstraintDBSurrogates } from './constraintDBSurrogates';
import type { ConstraintDBSimulatorPath } from './constraintDBSimulatorPath';
import type { ConstraintTypeEnum } from './constraintTypeEnum';
import type { ConstraintDBId } from './constraintDBId';
import type { ConstraintDBProblemId } from './constraintDBProblemId';

/**
 * The SQLModel equivalent to `Constraint`.
 */
export interface ConstraintDB {
	func: unknown[];
	scenario_keys?: ConstraintDBScenarioKeys;
	surrogates?: ConstraintDBSurrogates;
	simulator_path?: ConstraintDBSimulatorPath;
	/** Descriptive name of the constraint. This can be used in UI and visualizations. Example: 'maximum length'. */
	name: string;
	/** Symbol to represent the constraint. This will be used in the rest of the problem definition. It may also be used in UIs and visualizations. Example: 'g_1'. */
	symbol: string;
	/** The type of the constraint. Constraints are assumed to be in a standard form where the supplied 'func' expression is on the left hand side of the constraint's expression, and on the right hand side a zero value is assume. The comparison between the left hand side and right hand side is either and quality comparison ('=') or lesser than equal comparison ('<='). */
	cons_type: ConstraintTypeEnum;
	/** Whether the constraint is linear or not. Defaults to True, e.g., a linear constraint is assumed. */
	is_linear?: boolean;
	/** Whether the function expression is convex or not (non-convex). Defaults to `False`. */
	is_convex?: boolean;
	/** Whether the function expression is twice differentiable or not. Defaults to `False` */
	is_twice_differentiable?: boolean;
	id?: ConstraintDBId;
	problem_id?: ConstraintDBProblemId;
}
