/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * DESDEO (fast)API
 * A rest API for the DESDEO framework.
 * OpenAPI spec version: 0.1.0
 */
import type { ObjectiveDBFunc } from './objectiveDBFunc';
import type { ObjectiveDBScenarioKeys } from './objectiveDBScenarioKeys';
import type { ObjectiveDBSurrogates } from './objectiveDBSurrogates';
import type { ObjectiveDBSimulatorPath } from './objectiveDBSimulatorPath';
import type { ObjectiveDBUnit } from './objectiveDBUnit';
import type { ObjectiveDBIdeal } from './objectiveDBIdeal';
import type { ObjectiveDBNadir } from './objectiveDBNadir';
import type { ObjectiveTypeEnum } from './objectiveTypeEnum';
import type { ObjectiveDBId } from './objectiveDBId';
import type { ObjectiveDBProblemId } from './objectiveDBProblemId';

/**
 * The SQLModel equivalent to `Objective`.
 */
export interface ObjectiveDB {
	func: ObjectiveDBFunc;
	scenario_keys?: ObjectiveDBScenarioKeys;
	surrogates?: ObjectiveDBSurrogates;
	simulator_path?: ObjectiveDBSimulatorPath;
	/** Descriptive name of the objective function. This can be used in UI and visualizations. Example: 'time'. */
	name: string;
	/** Symbol to represent the objective function. This will be used in the rest of the problem definition. It may also be used in UIs and visualizations. Example: 'f_1'. */
	symbol: string;
	/** The unit of the objective function. This is optional. Used in UIs and visualizations. Example: 'seconds' or 'millions of hectares'. */
	unit?: ObjectiveDBUnit;
	/** Whether the objective function is to be maximized or minimized. */
	maximize?: boolean;
	/** Ideal value of the objective. This is optional. */
	ideal?: ObjectiveDBIdeal;
	/** Nadir value of the objective. This is optional. */
	nadir?: ObjectiveDBNadir;
	/** The type of objective function. 'analytical' means the objective function value is calculated based on 'func'. 'data_based' means the objective function value should be retrieved from a table. In case of 'data_based' objective function, the 'func' field is ignored. Defaults to 'analytical'. */
	objective_type?: ObjectiveTypeEnum;
	/** Whether the function expression is linear or not. Defaults to `False`. */
	is_linear?: boolean;
	/** Whether the function expression is convex or not (non-convex). Defaults to `False`. */
	is_convex?: boolean;
	/** Whether the function expression is twice differentiable or not. Defaults to `False` */
	is_twice_differentiable?: boolean;
	id?: ObjectiveDBId;
	problem_id?: ObjectiveDBProblemId;
}
